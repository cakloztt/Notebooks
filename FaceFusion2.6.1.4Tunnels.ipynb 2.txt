{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZlrnUA3i3gMB","outputId":"ef0a2cd3-cc5c-45db-b82c-f61e026fa1d2","executionInfo":{"status":"ok","timestamp":1728063527888,"user_tz":-420,"elapsed":289221,"user":{"displayName":"Thành Trung Nguyễn Đăng","userId":"09651956040812946314"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Installed!\n"]}],"source":["#@title Install FaceFusion\n","from IPython.display import clear_output\n","import torch\n","import codecs\n","\n","if torch.cuda.is_available():\n","  !apt-get update\n","  !apt-get install -y nvidia-cuda-toolkit\n","  device=\"cuda\"\n","  print(\"Using GPU\")\n","else:\n","  device=\"cpu\"\n","  print(\"Using CPU\")\n","\n","\n","git_repo_rot13 = 'uggcf://tvguho.pbz/snprshfvba/snprshfvba'\n","git_repo = codecs.decode(git_repo_rot13, 'rot 13')\n","\n","!git clone $git_repo --branch 2.6.1 --single-branch\n","\n","directory_rot13 = 'snprshfvba'\n","directory = codecs.decode(directory_rot13, 'rot 13')\n","\n","%cd /content/$directory\n","!python install.py --onnxruntime cuda-12.2 --skip-conda\n","\n","clear_output()\n","print(\"Installed!\")"]},{"cell_type":"markdown","metadata":{"id":"7KRg0eIwSHq6"},"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"cellView":"form","colab":{"base_uri":"https://localhost:8080/"},"id":"YVHiNI-bb6IA","outputId":"b4adf0c6-04ca-4c09-f518-cbad02020f21"},"outputs":[{"output_type":"stream","name":"stdout","text":["/content/facefusion\n","Downloading: 100% 22.5M/22.5M [00:01<00:00, 14.8MB/s]\n","Downloading: 100% 93.4M/93.4M [00:01<00:00, 80.2MB/s]\n","Downloading: 100% 922k/922k [00:01<00:00, 738kB/s]\n","Downloading: 100% 1.26M/1.26M [00:01<00:00, 1.05MB/s]\n","Downloading:   0% 0.00/12.1M [00:00<?, ?B/s]"]}],"source":["#@title Run UI\n","\n","import codecs\n","import re\n","\n","%cd /content/$directory\n","\n","#@markdown The type of tunnel you wanna use for seeing the public link, so if the API of one of them is down, you can use the other one.\n","Tunnel = \"Gradio\" #@param [\"Gradio\", \"Ngrok\", \"Cloudfare\", \"LocalTunnel\"]\n","\n","\n","\n","ngrok_tunnel_authtoken = \"\" #@param {type:\"string\"}\n","\n","\n","if Tunnel == \"Gradio\":\n","  file_path_ui_rot13 = \"/pbagrag/snprshfvba/snprshfvba/hvf/ynlbhgf/qrsnhyg.cl\"\n","  file_path_ui = codecs.decode(file_path_ui_rot13, 'rot 13')\n","  !sed -i 's/quiet = True/quiet=True,share=True/g' $file_path_ui\n","elif Tunnel == \"Ngrok\":\n","  !sed -i 's/quiet=True,share=True/quiet = True/g' $file_path_ui\n","  !pip install pyngrok\n","  from pyngrok import ngrok\n","  ngrok.set_auth_token(ngrok_tunnel_authtoken)\n","  http_tunnel = ngrok.connect(7860, bind_tls=True)\n","  clear_output()\n","  print(\"Ngrok Tunnel Public URL:\", http_tunnel.public_url)\n","elif Tunnel == \"Cloudfare\":\n","  !sed -i 's/quiet=True,share=True/quiet = True/g' $file_path_ui\n","  # download cloudfare\n","  !curl -LO https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb\n","  !dpkg -i cloudflared-linux-amd64.deb\n","  !rm -rf nohup.out\n","  import time\n","  # Run cloudflare\n","  !nohup cloudflared tunnel --url localhost:7860 &\n","  clear_output()\n","  time.sleep(5)\n","  # Find and print the Cloudflare URL with a prefix\n","  cloudflare_url = !grep -oE \"https://[a-zA-Z0-9.-]+\\.trycloudflare\\.com\" nohup.out\n","  print(f\"Cloudfare Tunnel Public URL: {cloudflare_url[0]}\")\n","elif Tunnel == \"LocalTunnel\":\n","  !sed -i 's/quiet=True,share=True/quiet = True/g' $file_path_ui\n","  # install\n","  !npm install -g localtunnel\n","  import time\n","  import urllib\n","  # run localtunnel\n","  with open('url.txt', 'w') as file:\n","        file.write('')\n","\n","  get_ipython().system_raw('lt --port 7860 >> url.txt 2>&1 &')\n","\n","  time.sleep(4)\n","\n","  endpoint_ip = urllib.request.urlopen('https://ipv4.icanhazip.com').read().decode('utf8').strip(\"\\n\")\n","\n","  with open('url.txt', 'r') as file:\n","      tunnel_url = file.read()\n","      tunnel_url = tunnel_url.replace(\"your url is: \", \"\")\n","\n","  clear_output()\n","  print(f\"LocalTunnel Tunnel Public URL: \\033[0m\\033[93m{tunnel_url}\\033[0m\", end=\"\\033[0m\")\n","\n","  print(f'LocalTunnel Password: {endpoint_ip}')\n","\n","\n","if device==\"cuda\":\n","  !python run.py --execution-providers cuda\n","else:\n","  !python run.py --execution-providers cpu"]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}